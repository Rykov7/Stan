import shelve

from . import stan
from . import rules

from .helpers import represent_as_get, detect_args, update_stats
from .filters import *
from .config import *

"""                [ ANTISPAM ]             """


@bot.edited_message_handler(func=in_spam_list, chat_types=["supergroup", "group"])
@bot.message_handler(func=in_spam_list, chat_types=["supergroup", "group"])
async def moderate_messages(message: types.Message):
    """Ban user and delete their message."""
    await bot.delete_message(message.chat.id, message.id)
    await bot.ban_chat_member(message.chat.id, message.from_user.id)
    with shelve.open(f"{DATA}{message.chat.id}") as s:
        s["Banned"] += 1


@bot.message_handler(func=in_caption_spam_list, content_types=["video"], chat_types=["supergroup", "group"])
async def catch_videos(message: types.Message):
    """Catch offensive videos"""
    await bot.delete_message(message.chat.id, message.id)
    await bot.ban_chat_member(message.chat.id, message.from_user.id)
    with shelve.open(f"{DATA}{message.chat.id}") as s:
        s["Banned"] += 1


@bot.edited_message_handler(func=in_delete_list, chat_types=["supergroup", "group"])
@bot.message_handler(func=in_delete_list, chat_types=["supergroup", "group"])
async def delete_message(message: types.Message):
    """Delete unwanted message."""
    await bot.delete_message(message.chat.id, message.id)
    with shelve.open(f"{DATA}{message.chat.id}") as s:
        s["Deleted"] += 1


"""                [ COMMANDS ]             """


@bot.message_handler(commands=["start", "links", "—Å—Å—ã–ª–∫–∏"])
async def start(message: types.Message):
    """What to begin with."""
    logging.info(LOG_COMM % (message.chat.title, message.from_user.id, message.from_user.first_name, message.text))
    markup = types.InlineKeyboardMarkup([[RULES], [FAQ], [LIB]], 1)
    await send_or_reply(message, "–ù–∞—á–Ω–∏ —Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è", reply_markup=markup)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["rules", "rule", "r", "–ø—Ä–∞–≤–∏–ª–∞", "–ø—Ä–∞–≤–∏–ª–æ", "–ø"])
async def send_rules(message: types.Message):
    markup = types.InlineKeyboardMarkup([[RULES]], 1)
    args = message.text.split()
    logging.info(LOG_COMM % (message.chat.title, message.from_user.id, message.from_user.first_name, message.text))
    if len(args) > 1 and args[-1].isdigit() and 0 < int(args[-1]):
        await send_or_reply(
            message,
            f"<b>–ü—Ä–∞–≤–∏–ª–æ {args[-1]}</b>\n<i>{rules.fetch_rule(args[-1])}</i>",
            reply_markup=markup,
        )
    else:
        await send_or_reply(message, "–ß–∏—Ç–∞–π...", reply_markup=markup)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["faq", "—á–∑–≤"])
async def send_faq(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    markup = types.InlineKeyboardMarkup([[FAQ]], 1)
    await send_or_reply(message, "–ß–∏—Ç–∞–π...", reply_markup=markup)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["lib", "library", "books", "–∫–Ω–∏–≥–∏", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞"])
async def send_lib(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    markup = types.InlineKeyboardMarkup([[LIB]], 1)
    await send_or_reply(message, "–ß–∏—Ç–∞–π...", reply_markup=markup)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["lutz", "–ª—É—Ç—Ü"])
async def send_lutz(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    await bot.send_document(
        message.chat.id,
        document="BQACAgQAAxkBAAPBYsWJG9Ml0fPrnbU9UyzTQiQSuHkAAjkDAAIstCxSkuRbXAlcqeQpBA",
        caption="–≤–æ—Ç, –Ω–µ –ø–æ–∑–æ—Ä—å—Å—è",
    )
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["bdmtss", "–±–¥–º—Ç—Å—Å"])
async def send_bdmtss_audio(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    await bot.send_voice(
        message.chat.id,
        "AwACAgIAAxkBAAIJrWOg2WUvLwrf7ahyJxQHB8_nqllwAAL5JQAC2_IJSbhfQIO5YnVmLAQ",
    )
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["tr", "—Ç—Ä"])
async def translate_layout(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    if message.reply_to_message and message.reply_to_message.text:
        if message.reply_to_message.text[0] in RUS:
            await bot.send_message(message.chat.id, message.reply_to_message.text.translate(RUS_ENG_TABLE))
        else:
            await bot.send_message(message.chat.id, message.reply_to_message.text.translate(ENG_RUS_TABLE))


@bot.message_handler(commands=["quote", "—Ü–∏—Ç–∞—Ç–∞"])
async def stan_speak(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    await bot.send_message(message.chat.id, stan.speak(0, message.chat.id), parse_mode='Markdown')
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["tsya", "—Ç—Å—è", "—Ç—å—Å—è"])
async def send_tsya(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üßëüèº‚Äçüéì –ß–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ", url="https://tsya.ru/"),
        row_width=1,
    )
    await send_or_reply(message, "<i>-—Ç—Å—è</i> –∏ <i>-—Ç—å—Å—è</i> –≤ –≥–ª–∞–≥–æ–ª–∞—Ö", reply_markup=markup)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["nometa", "–Ω–æ–º–µ—Ç–∞"])
async def send_nometa(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ùì nometa.xyz", url="https://nometa.xyz/ru.html"),
        row_width=1,
    )
    await send_or_reply(
        message,
        """–ù–µ –∑–∞–¥–∞–≤–∞–π –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä–æ–¥–µ:
<i>  ¬´–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?¬ª
  ¬´–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è .. ?¬ª
  ¬´–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ .. !¬ª</i>

–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ —Å—Ä–∞–∑—É! –ò —á–µ–º –ª—É—á—à–µ –æ–±—ä—è—Å–Ω–∏—à—å –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –ø–æ–ª—É—á–∏—à—å –ø–æ–º–æ—â—å.""",
        reply_markup=markup,
    )
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["neprivet", "–Ω–µ–ø—Ä–∏–≤–µ—Ç"])
async def send_neprivet(message: types.Message):
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üëã –ù–µ–ø—Ä–∏–≤–µ—Ç", url="https://neprivet.com/"),
        row_width=1,
    )
    await send_or_reply(
        message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ ¬´–ü—Ä–∏–≤–µ—Ç¬ª –≤ —á–∞—Ç–µ.", reply_markup=markup
    )
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["nojob", "–Ω–æ–¥–∂–æ–±"])
async def send_nojob(message):
    answer = """–ú—ã –∑–¥–µ—Å—å –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞ —Ç–µ–±—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.

–ó–¥–µ—Å—å –ø–æ–º–æ–≥–∞—é—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ <u>–¢–í–û–Å–ú</u> –∫–æ–¥–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —Å–∞–º –∏ \
–æ–±—ä—è—Å–Ω–∏—Ç—å –≥–¥–µ –∏ –ø–æ—á–µ–º—É –∑–∞—Å—Ç—Ä—è–ª... –≤—Å—ë –ø—Ä–æ—Å—Ç–æ. ü§∑üèºÔ∏è"""
    await send_or_reply(message, answer)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["nobot", "–Ω–æ–±–æ—Ç"])
async def nobot(message: types.Message):
    answer = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç <i>–Ω–µ –¥–æ–ª–∂–µ–Ω</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, \
<code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>–æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</code>, <code>–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</code> –∏ \
<code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    await send_or_reply(message, answer)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["nogui", "–Ω–æ–≥—É–∏"])
async def nogui(message: types.Message):
    answer = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <i>–Ω–µ –¥–æ–ª–∂–Ω–æ</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, \
<code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>—Ü–∏–∫–ª—ã —Å–æ–±—ã—Ç–∏–π</code> –∏ <code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ \
GUI-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    await send_or_reply(message, answer)
    await bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=["g", "–≥"])
async def google_it(message: types.Message):
    """Google it!"""
    logging.info(
        LOG_COMM
        % (
            message.chat.title,
            message.from_user.id,
            message.from_user.first_name,
            message.text,
        )
    )
    query = f"<i>{detect_args(message)}</i>"
    get_query = "https://www.google.com/search?q=" + represent_as_get(message)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç Google –ü–æ–∏—Å–∫", url=get_query), row_width=1)
    await send_or_reply(message, f"<i>–ò—â–µ–º ¬´{query}¬ª...</i>", reply_markup=markup)


"""                [ ADMIN PANEL ]              """


@bot.message_handler(func=is_admin, commands=["ddel"])
async def delete_user(message: types.Message):
    if message.reply_to_message:
        await bot.delete_message(message.chat.id, message.id)
        await bot.delete_message(message.chat.id, message.reply_to_message.id)
        logging.info(
            "!DEL!M "
            + LOG_COMM
            % (
                message.chat.title,
                message.reply_to_message.from_user.id,
                message.reply_to_message.from_user.first_name,
                message.reply_to_message.text,
            )
        )


@bot.message_handler(func=is_admin, commands=["bban"])
async def ban_user(message: types.Message):
    if message.reply_to_message:
        await bot.delete_message(message.chat.id, message.id)
        await bot.delete_message(message.chat.id, message.reply_to_message.id)
        await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        logging.info(
            f"!BAN!M "
            + LOG_COMM
            % (
                message.chat.title,
                message.reply_to_message.from_user.id,
                message.reply_to_message.from_user.first_name,
                message.reply_to_message.text,
            )
        )


@bot.message_handler(func=is_admin, commands=["unban_id"])
async def unban_user(message: types.Message):
    if message.text.split()[-1].isdigit():
        user_id = int(message.text.split()[-1])
        await bot.unban_chat_member(PYTHONCHATRU, user_id)
        logging.info(f"!UNBAN (M)! {user_id}")


"""                [ INLINE ]               """


@bot.inline_handler(lambda query: True)
async def default_query(inline_query):
    """Inline the Zen of Python."""
    zen = []
    for id_p, phrase in enumerate(ZEN):
        q = inline_query.query.casefold()
        if phrase.casefold().startswith(q) or " " + q in phrase.casefold():
            zen.append(
                types.InlineQueryResultArticle(
                    f"{id_p}",
                    f"The Zen of Python #{id_p + 1}",
                    types.InputTextMessageContent(f"{phrase}"),
                    description=phrase,
                )
            )

    await bot.answer_inline_query(inline_query.id, zen, cache_time=1200)


"""                [ COUNTER ]              """


@bot.message_handler(content_types=["text", "sticker", "photo", "animation", "video", "audio", "document", ],
                     chat_types=["supergroup", "group"])
async def handle_msg(message: types.Message):
    """Count messages, Stan."""
    update_stats(message)
    await stan.act(message)


"""                [ WEBHOOK ]              """


@app.post(f"/bot{TOKEN}/")
async def webhook(update: dict):
    """Parse POST requests from Telegram."""
    if update:
        update = telebot.types.Update.de_json(update)
        await bot.process_new_updates([update])
    else:
        return
