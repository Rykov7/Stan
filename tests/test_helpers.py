from unittest import TestCase, main
from unittest.mock import MagicMock
from src.constants import SPAM, BAN_WORDS, ADMIN_ID, RULES_TEXT
from src.helpers import (
    is_spam, is_mixed, is_ban_words_in_caption, is_in_not_allowed, is_nongrata, is_admin, fetch_rule, cleaned_text,
    remove_spaces, has_no_letters, has_links
)

REAL_CASES = (
    "–û—Ñ–æ—Ä–º–∏–º —Ä–µ–∑–∏–¥e–Ω—Ç—Å—Ç–≤o –û–ê–≠ –±–µ–∑ –ø—Ä–µ–¥o–ø–ª–∞—Ç—ã –∑–∞ 5000 –¥–∏—Ä—Ö–∞–º. –üo–¥—Ä–æ–±–Ωo—Å—Ç–∏ –≤ –ªc",
    "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç –Ø –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—é–¥–µ–π –≤ kp–∏–ø—Ço –∫o–ºa–Ω–¥—É –£ –Ω–∞—Å –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ 6ec–ø–ªa—Ç–Ω–æe –æ–±—É—á–µ–Ωue 1-3 –¥–Ω—è –ú–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π pa–±o—Ço–π",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω—ã 2 —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç 200 $/–¥–µ–Ω—å. –ú–æ–∂–Ω–æ –±–µ–∑ –æ–ø—ã—Ç–∞ –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è +",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!–ù—É–∂–Ω—ã 2 —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç 200 $/–¥–µ–Ω—å.–ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ +",

    f"üôå–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏ –æ—Å–≤–æ–π—Ç–µ –º–∏—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ "
    f"–ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –≤–æ–ø–ª–æ—Ç–∏—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞–º–±–∏—Ü–∏–∏. –£ –Ω–∞—Å - –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏–µ, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ "
    f"—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±—É–¥—É—â–µ–µ. –ü—Ä–æ–∫–∞—á–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!–ü–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ‚úåÔ∏è",

    f"–ò—â—É –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –û–ø—ã—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –≤—Å–µ–º—É –æ–±—É—á–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ, "
    f"–±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç! –ú–æ–π –∏–Ω—Ç–µ—Ä–µ—Å % –æ—Ç —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞ üíµ–í—Å–µ –≤–Ω—É—Ç—Ä–∏ –±–∏—Ä–∂–∏, –±–µ–∑ –ª–µ–≤—ã—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤. "
    f"–ü–∏—à–∏—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
)

TEST_CASES = ('here it me.sv/122', "My site is tg.sv/home", "look here goo.by/home", "Go there go.sv/home",
              "I am here intim.video/home", "Here ckick it uclck.ru/home", 'WOWüíé', 'Attention üîû', 'Look here ‚û°Ô∏è',
              'Money for youüí∞', 'Some cashüí∏', 'Real money‚ÄºÔ∏è', '–ú–Ω–æ–≥–æ —Ä–∞–±0—Ç', '0–ø–ª–∞—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è',
              '–¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞', '–≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–≤ —Å—Ñ–µ—Ä–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç', '–Ω–∞ –±–∏—Ä–∂–µ Binance',
              '–Ω–∞ –±–∏—Ä–∂–µ ByBit', '–ü–æ–º–æ–≥—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥', '–∞—Ä–±–∏—Ç—Ä–∞–∂ –≤–∞–º –Ω—É–∂–µ–Ω', 'DEX –±–∏—Ä–∂–∏', '–ª—é–±—É—é –¥–µ–≤—É—à–∫—É –º–æ–∂–Ω–æ',
              '–ø—Ä–∏–±—ã–ª—å —É –≤a—Å –≤ –∫–∞—Ä–º–∞–Ω–µ', '–æ–±—É—áa—é –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–æ–≤—ã–π –≤–∏–¥ –∑–∞—Ä–∞–±–æ—Ç–∫–∞',
              '–º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∫—Ä—É–≥', '–ö–£–ü–Æ–†–´ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–µ', 'k—Ä–∏–ø—Ç–∞ —Ñ–æ—Ä–µ–≤–∞', '–±–∏p–∂–∞ –∂–¥–µ—Ç', 'ap–±–∏—Çpa–∂ –≤–∞–ª—é—Ç',
              '–≤ –Ω–µ–¥–µ–ª—é –≤—ã—Ö–æ–¥–∏—Ç –¥–æ 100', '—Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–≥–æ–ª—ã–µ —Ñ–æ—Ç–∫–∏ –±–∞–±', '–∏–Ω—Ç–∏–º–Ω—ã–µ —Ñ–æ—Ç–æ –¥–µ–≤—á–∞—Ç',
              '–∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫—Ä–∏–ø—Ç–µ –º–Ω–æ–≥–æ –Ω–µ –±—ã–≤–∞–µ—Ç', '–í–µ–¥—É –Ω–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ', '–ò–¥—ë—Ç –Ω–∞–±–æ—Ä –∫–æ –º–Ω–µ', '–î–æ—Ö–æ–¥ –æ—Ç 100',
              'Trading —ç—Ç–æ –∫—Ä—É—Ç–æ', 'P2P –±–æ–π–∑', '–ò–¥–µ—Ç –Ω–∞–±–æ—Ä –∫—É–¥–∞ —Ç–æ', '–Ωa–±op –Ω–æ–º–µ—Ä–∞', '–≤ –∫–æ–ºa–Ω–¥y', 'kpu–ø—Ç–∞ –µ—Å—Ç—å',
              '–±up–∂—ã —Ä—É–ª—è—Ç', '–ø–∏—à–∏—Çe –≤—Å–µ–º', '–Ω–æ–ª—å $ –≤ –Ω–µ–¥–µ–ª—é', '–æ–±—É—á–∞—é —Å –Ω—É–ª—è –∏ –µ–¥–∏–Ω–∏—Ü—ã', '–¥–æ—Ö–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–Ω–µ–π',
              '–ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –ø—Ä–æ–π–¥–µ–º', '—Ñ–∞–ª—å—à–∏–≤—ã–µ —Ä—É–±–ª–∏ —ç—Ç–æ –∑–ª–æ', '–∑–∞—Ä–æ–±–æ—Ç–∫—É –≤ –Ω–µ—Ç–µ', '–ù–∞–±u—Ä–∞—é –Ω–æ–º–µ—Ä–∞', '—Üu—Ñ—Ä—ã –µ—Å—Ç—å?',
              '–û–±—É—á—É –≤–∞—Å –ø–ª—è—Å–∞—Ç—å', '–ø—Äu–±–æ—Ä–æ–º –≤–ª–∞–¥–µ—é', '–æ—Å—Ç–∞–ª–∏—Å—å –∫—É—Ä—Å—ã –ø–æ —à–∏—Ç—å—é', 'Crypt–æ–≥—Ä–∞—Ñ', 'k—Ä–∏—Å—Ç–∞–ª–ª', '—Äu—Å–æ–≤–∞—Ç—å',
              '–≤ –ªc –ø–∏—à–∏', "–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∏—à–∏", '–ñ–¥—É –≤ –õ–° —Ä–µ–±—è—Ç', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ª—Å –Ω–∞–ø–∏—à—É', '–Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–∫—É –¥—Ä—É–≥',
              '–ø–∏—à–∏—Ç–µ –≤ –õ–° –ø–∞—Ä–Ω–∏', '–ü–∏—Å–∞—Ç—å –≤ –õ–ò–ß–ö–£! —É—Ä–∞!', '–ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É', '–≤ –ª.—Å. –∫–ø—Å—Å', '–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ –õ–°',
              '–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° –¥–µ–≤—á–∞—Ç–∞', '–ü–∏—Å–∞—Ç—å –≤ –õ–° –Ω–µ –Ω—É–∂–Ω–æ', '–º–Ω–µ –≤ –õ–° –Ω–µ –ø–∏—à–∏—Ç–µ', '–≤ –ª—Å –ø–∏—à–∏—Ç–µ', '–ü–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ',
              '–ø–∏—à–µ–º –≤ –ª–∏—á–∫—É', '—Å—Ç—É—á–∏—Ç–µ –≤ –ª–∏—á–∫—É', '–∂–¥—É –≤ –ª–∏—á–∫–µ', '–∂–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö', '—à–ª–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è +',
              '–ü–∏—à–µ–º –≤ –ª–∏—á–Ω—ã–µ', '–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ', '–ø—Ä–µ–≤–µ—Ç –º—ã –∏—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', '—è –∏—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –¥–µ–ª–∞',
              '–∫–æ–º–∞–Ω–¥–∞ –≤ –ø–æ–∏—Å–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', '–ø–∏—Ç—å –æ–±—É—á–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–æ–±—É—á—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–µ—Ç—å', '–æ–±—É—á–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—Å–µ–º—É',
              '—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ—Ç', '—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –∫–æ–Ω—á–∏–ª–∏—Å—å', '—Ü–∏—Ñ—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –≤ —Ç–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ',
              '–æ–±—É—á–∏–º –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç', '–≤–∞—Å –æ–±—É—á–∏–º –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã', '–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–æ–ø–ª–∞—Ç –Ω–µ –Ω—É–∂–Ω–æ',
              '–¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', '–¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', '–≤ —ç—Ç–æ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞'
              )


class TestSpam(TestCase):
    def test_simple(self):
        for spam_word in SPAM:
            with self.subTest(f"check spam word({spam_word})"):
                self.assertTrue(is_spam(spam_word))

    def test_case_first(self):
        for text in REAL_CASES:
            with self.subTest(f"check case({text})"):
                self.assertTrue(is_spam(text))

    def test_main_cases(self):
        for text in TEST_CASES:
            with self.subTest(f"check case({text})"):
                self.assertTrue(is_spam(text))

    def test_one(self):
        self.assertTrue(is_spam("–ø—Ä–∏–≤e—Ç"))  # e –∞–Ω–≥–ª–∏–π—Å–∫–∞—è

    def test_is_mixed(self):
        self.assertTrue(is_mixed("–ø—Ä–∏–≤e—Ç"))  # e –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
        self.assertFalse(is_mixed("–ø—Ä–∏–≤–µ—Ç —Ä–µ–±—è—Ç–∞!"))
        self.assertFalse(is_mixed("hi guys"))
        self.assertFalse(is_mixed("hi guys! #%^&%^$ @–í–∞—Å—è –ø—Ä–∏–≤–µ—Ç g! –ø@"))
        self.assertFalse(is_mixed("hi guys! #%^&%^$ @–í–∞—Å—è –ø—Ä–∏–≤–µ—Ç g! –ø@"))
        self.assertFalse(is_mixed("—Ç—É—Ç *–ø–æ–¥—Ä–æ–±–Ω–µ–µ* https://hack.comp.com"))
        self.assertTrue(is_mixed("hi guys! #%^&%^$ ghb –ø—Ä–∏–≤–µ—Ç g! –øQ"))
        text = """
        –í —Ü–µ–ª–æ–º –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —á–∞—Ç, –≥–¥–µ 4 —á–µ–ª–æ–≤–µ–∫–∞
 —Å—á–∏—Ç–∞—é—Ç —Å–µ–±—è –≤—ã—à–µ –º–∏—Ä–∞ –≤—Å–µ–≥–æ –∏ –Ω–∞–ø–∞–¥–∞—é—Ç/–Ω–∞—Å–º–µ—Ö–∞—é—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö/–Ω–∞–¥ –≤—Å–µ–º–∏, –∫—Ç–æ —á—Ç–æ-—Ç–æ "–Ω–µ–¥–æ". 
–û–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–æ–±—â–µ –≤—ã–¥–∞—ë—Ç –∫–∞–∫–∏–µ-—Ç–æ —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞) –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–∞–º –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å, –∏–ª–∏ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–∑–¥–≤–æ–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–µ–ª–æ —Ç–∞–∫–æ–µ)
¬´–Ø –ø—É–ø –∑–µ–º–ª–∏¬ª, ‚Äì —Ç–≤–µ—Ä–¥–∏—Ç –≥–æ—Ä–¥–µ—Ü –Ω–∞–¥–º–µ–Ω–Ω–æ,
–ó–∞–±—ã–≤, —á—Ç–æ –æ–Ω ‚Äì –ø–µ—Å—á–∏–Ω–∫–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
        self.assertFalse(is_mixed(text))
        self.assertFalse(is_mixed('print("–ø—Ä–∏–≤–µ—Ç")'))
        self.assertFalse(is_mixed("print('–ø—Ä–∏–≤–µ—Ç')"))
        self.assertFalse(is_mixed("text='—Å–ª–æ–≤–æ'"))
        self.assertTrue(is_mixed("k—Ä–∏–ø—Ç"))
        self.assertTrue(is_mixed("kpu–ø—Ç"))
        self.assertTrue(is_mixed('–±up–∂'))
        self.assertTrue(is_mixed('–ø–∏—à–∏—Çe'))
        self.assertTrue(is_mixed('–Ωa–±op'))
        self.assertTrue(is_mixed('–∫–æ–ºa–Ω–¥y'))
        self.assertTrue(is_mixed('–ù–∞–±u—Ä–∞—é'))
        self.assertTrue(is_mixed('—Üu—Ñ—Ä'))
        self.assertTrue(is_mixed('–ø—Äu–±'))
        self.assertTrue(is_mixed('k—Ä'))
        self.assertTrue(is_mixed('—Äu'))
        self.assertTrue(is_mixed('ap–±–∏—Çpa–∂'))
        self.assertTrue(is_mixed('–±–∏p–∂'))


class TestOthers(TestCase):
    def test_ban(self):
        for word in BAN_WORDS:
            with self.subTest(f"check ban word({word})"):
                self.assertTrue(is_ban_words_in_caption(word))

    def test_allowed(self):
        params = (
            (True, [], 'any'),
            (True, ['one'], 'two'),
            (False, ['one', 'two'], 'two'),
            (False, ['one', 'two'], 'Two'),
            (False, ['one', 'two'], 'TWO'),
        )
        for expected, words, mess in params:
            with self.subTest(f"check allowed({words, mess})"):
                self.assertEqual(is_in_not_allowed(words, mess), expected)

    def test_non_grata(self):
        params = (
            (False, 'any'),
            (True, '–¥—É–¥–∞—Ä'),
            (True, '—Ö–∞—É–¥–∏'),
            (True, 'dudar'),
        )
        for expected, text in params:
            with self.subTest(f"check non-grata({text})"):
                m = MagicMock(text=text)
                self.assertEqual(is_nongrata(m), expected)

    def test_is_admin(self):
        params = (
            (False, 'any'),
            (True, ADMIN_ID),
        )
        for expected, text in params:
            with self.subTest(f"check non-grata({text})"):
                m = MagicMock(from_user=MagicMock(id=text))
                self.assertEqual(is_admin(m), expected)

    def test_fetch_rule(self):
        for index, text in enumerate(RULES_TEXT, 1):
            with self.subTest(f"fetch rule {index}"):
                self.assertEqual(fetch_rule(index), text)

    def test_fetch_non_existent_rule(self):
        self.assertEqual(fetch_rule(0), '–ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏')
        self.assertEqual(fetch_rule(100), '–ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏')

    def test_cleaned_text(self):
        params = (
            ('f1   b2  print  text  ', 'f1!, b2# print("text")'),
            ('text', 'text'),
            ('    ', '!@#$'),
        )
        for expected, text in params:
            with self.subTest(f"cleaned_text {text}"):
                self.assertEqual(expected, cleaned_text(text))

    def test_remove_spaces(self):
        params = (
            ('f1 b2 print text', 'f1   b2  print  text  '),
            ('text', 'text'),
            ('!@#$', '!@#$'),
        )
        for expected, text in params:
            with self.subTest(f"remove_spaces {text}"):
                self.assertEqual(expected, remove_spaces(text))

    def test_has_no_letters(self):
        params = (
            (False, 'f1   b2  print  text  '),
            (True, ''),
            (True, ' '),
            (True, '12 @# &*'),
            (False, '12 @# &* f'),
            (False, '12 @# &* Z'),
            (False, '12 @# &* —è'),
            (False, '12 @# &* –Ø'),
        )
        for expected, text in params:
            with self.subTest(f"has_no_letters {text}"):
                self.assertEqual(expected, has_no_letters(text))

    def test_has_links(self):
        params = (
            (True, 'My bot https://t.me/bot.some'),
            (True, 'My bot http://t.me/bot.some'),
            (False, 'My bot here'),
            (False, 'I can use http'),
        )
        for expected, text in params:
            with self.subTest(f"has_links {text}"):
                self.assertEqual(expected, has_links(text))


if __name__ == '__main__':
    main()
