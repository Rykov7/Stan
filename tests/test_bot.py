import logging
from unittest import IsolatedAsyncioTestCase, main, TestCase
import os
from unittest.mock import patch, MagicMock

from telebot import asyncio_helper, types, logger

# –ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞, –∏–Ω–∞—á–µ —É–ø–∞–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –µ–Ω–≤–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
os.environ["LUTZPYBOT"] = "00000:AAAAAAAAAAAA"
os.environ["whiteids"] = "100,200,300"
os.environ["rollback"] = "1,2,3"
os.environ["use_reminder"] = "FALSE"
os.environ["testing"] = "TRUE"

from src import helpers

# –Ω—É–∂–Ω–æ –Ω–µ –¥–∞—Ç—å –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç–∞—Ö, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—É—Ç -–∑–∞ –ü—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞
helpers.is_url_reachable = lambda a: True
from src.commands import bot
from src.constants import BDMTSS_ID, LUTZ_ID, ADMIN_ID, HELLO_EXAMPLES
from src.filters import is_white_id, is_invalid_name

# –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞, –≤ —Ç–µ—Å—Ç–∞—Ö –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
logger.setLevel(logging.ERROR)

# —Å—é–¥–∞ –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –æ—á–∏—â–∞–µ—Ç—Å—è
RESULTS = []


def _all_nones():
    edited_message = None
    channel_post = None
    edited_channel_post = None
    inline_query = None
    chosen_inline_result = None
    callback_query = None
    shipping_query = None
    pre_checkout_query = None
    poll = None
    poll_answer = None
    my_chat_member = None
    chat_member = None
    chat_join_request = None
    return (edited_message, channel_post, edited_channel_post, inline_query, chosen_inline_result, callback_query,
            shipping_query, pre_checkout_query, poll, poll_answer, my_chat_member, chat_member, chat_join_request)


def get_update(text, reply_to=None, user_id=10, first_name='Some User'):
    """–•–µ–ª–ø–µ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""
    params = {'text': text}
    chat = types.Chat(id=11, type='group')
    user = types.User(id=user_id, is_bot=False, first_name=first_name, full_name=first_name)
    if reply_to:
        params["reply_to_message"] = types.Message(message_id=2, from_user=user, date=None, chat=chat,
                                                   content_type='text', options={'text': reply_to}, json_string="")
    mess = types.Message(message_id=1, from_user=user, date=None, chat=chat, content_type='text', options=params,
                         json_string='')
    return types.Update(1001234038283, mess, *_all_nones())


def member(leave: bool = False):
    """–•–µ–ª–ø–µ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ —é–∑–µ—Ä–∞"""
    type_ = 'left_chat_member' if leave else 'new_chat_members'
    chat = types.Chat(id=11, type='group')
    params = {'content_type': type_}
    user = types.User(id=555, is_bot=False, first_name='Some User')
    mess = types.Message(message_id=1, from_user=user, date=None, chat=chat, content_type=type_,
                         options=params, json_string='')
    return types.Update(100100, mess, *_all_nones())


async def custom_sender(token, url, method='get', params=None, files=None, **kwargs):
    """–ó–∞–º–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ–ª–µ–≥—É"""
    RESULTS.append((params, url))
    chat = {"id": 1000, "type": "group", "bio": "bio",
            "photo": {"big_file_id": "file_id", "small_file_id": "file_id", "small_file_unique_id": "file_id",
                      "big_file_unique_id": "file_id"}}
    result = {"message_id": 1000, "date": 1, "chat": chat}
    if url == "getChat":
        result = chat
    return result


# –ß—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–µ–ª–µ–≥–µ
asyncio_helper._process_request = custom_sender


class TestOther(TestCase):
    def test_is_white(self):
        params = (
            (False, 1),
            (False, 10),
            (True, 100),
            (True, 200),
            (True, 300),
        )
        for expected, text in params:
            with self.subTest(f"check non-is_white_id({text})"):
                m = MagicMock(from_user=MagicMock(id=text))
                self.assertEqual(is_white_id(m), expected)

    def test_is_invalid_name(self):
        params = (
            (True, None),
            (True, ''),
            (True, ' '),
            (True, '.'),
            (True, '#!%%@$#@'),
            (True, '‚õîÔ∏è '),
            (True, '212434343'),
            (False, 'a212434343'),
            (False, '212434343—è'),
        )
        for expected, text in params:
            with self.subTest(f"check non-is_invalid_name({text})"):
                m = MagicMock(from_user=MagicMock(full_name=text))
                self.assertEqual(is_invalid_name(m), expected)


class TestBot(IsolatedAsyncioTestCase):

    def setUp(self) -> None:
        self.bot = bot
        RESULTS.clear()

    async def test_start(self):
        await self.bot.process_new_updates([get_update('/start')])
        self.assertEqual(RESULTS[0][0]['text'], "–ù–∞—á–Ω–∏ —Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è")

    async def test_non_grata(self):
        await self.bot.process_new_updates([get_update('–∫–∞–∫ –≤–∞–º –¥—É–¥–∞—Ä—å?')])
        self.assertEqual(RESULTS[0][0]['text'], "—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ –ª—é–±—è—Ç")

    async def test_non_grata2(self):
        await self.bot.process_new_updates([get_update('—Å–º–æ—Ç—Ä—é —Ö–∞—É–¥–∏')])
        self.assertEqual(RESULTS[0][0]['text'], "—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ –ª—é–±—è—Ç")

    async def test_rules(self):
        await self.bot.process_new_updates([get_update('/rules')])
        self.assertEqual(RESULTS[0][0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/pythonchatru-07-07" in RESULTS[0][0]['reply_markup'])

    async def test_faq(self):
        await self.bot.process_new_updates([get_update('/faq')])
        self.assertEqual(RESULTS[0][0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/faq-10-07-4" in RESULTS[0][0]['reply_markup'])

    async def test_lib(self):
        await self.bot.process_new_updates([get_update('/lib')])
        self.assertEqual(RESULTS[0][0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/what-to-read-10-06" in RESULTS[0][0]['reply_markup'])

    async def test_tr(self):
        await self.bot.process_new_updates([get_update('/tr', reply_to="ghbdtn")])
        self.assertEqual(RESULTS[0][0]['text'], "–ø—Ä–∏–≤–µ—Ç")

    async def test_tr2(self):
        await self.bot.process_new_updates([get_update('/tr', reply_to="—Ä—É–¥–¥—â")])
        self.assertEqual(RESULTS[0][0]['text'], "hello")

    async def test_tsya(self):
        await self.bot.process_new_updates([get_update('/tsya')])
        self.assertEqual(RESULTS[0][0]['text'], "<i>-—Ç—Å—è</i> –∏ <i>-—Ç—å—Å—è</i> –≤ –≥–ª–∞–≥–æ–ª–∞—Ö")
        self.assertTrue("https://tsya.ru/" in RESULTS[0][0]['reply_markup'])

    async def test_nometa(self):
        text = """–ù–µ –∑–∞–¥–∞–≤–∞–π –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä–æ–¥–µ:\n<i>  ¬´–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?¬ª\n  ¬´–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è .. ?¬ª\n  ¬´–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ .. !¬ª</i>\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ —Å—Ä–∞–∑—É! –ò —á–µ–º –ª—É—á—à–µ –æ–±—ä—è—Å–Ω–∏—à—å –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –ø–æ–ª—É—á–∏—à—å –ø–æ–º–æ—â—å."""
        await self.bot.process_new_updates([get_update('/nometa', reply_to="–∫—Ç–æ —Ç—É—Ç –ø–∏—Ç–æ–Ω–∏—Å—Ç?")])
        self.assertEqual(RESULTS[0][0]['text'], text)

    async def test_neprivet(self):
        await self.bot.process_new_updates([get_update('/neprivet', reply_to="–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º")])
        self.assertEqual(RESULTS[0][0]['text'], "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ ¬´–ü—Ä–∏–≤–µ—Ç¬ª –≤ —á–∞—Ç–µ.")
        self.assertTrue("https://neprivet.com/" in RESULTS[0][0]['reply_markup'])
        self.assertEqual(RESULTS[1][1], "deleteMessage")

    async def test_neprivet_auto(self):
        for hello in HELLO_EXAMPLES:
            with self.subTest(f"neprivet auto {hello}"):
                await self.bot.process_new_updates([get_update(hello)])
                self.assertEqual(RESULTS[0][0]['text'], "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ ¬´–ü—Ä–∏–≤–µ—Ç¬ª –≤ —á–∞—Ç–µ.")
                self.assertTrue("https://neprivet.com/" in RESULTS[0][0]['reply_markup'])
                RESULTS.clear()

    async def test_lutz(self):
        await self.bot.process_new_updates([get_update('/lutz', reply_to="–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º")])
        self.assertEqual(RESULTS[0][0]['caption'], "–≤–æ—Ç, –Ω–µ –ø–æ–∑–æ—Ä—å—Å—è")
        self.assertEqual(RESULTS[0][0]['document'], LUTZ_ID)
        self.assertEqual(RESULTS[0][1], "sendDocument")
        self.assertEqual(RESULTS[1][1], "deleteMessage")

    async def test_bdmtss(self):
        await self.bot.process_new_updates([get_update('/bdmtss', reply_to="–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º")])
        self.assertEqual(RESULTS[0][0]['voice'], BDMTSS_ID)
        self.assertEqual(RESULTS[0][1], "sendVoice")
        self.assertEqual(RESULTS[1][1], "deleteMessage")

    async def test_google(self):
        await self.bot.process_new_updates([get_update('/g', reply_to="python")])
        self.assertEqual(RESULTS[0][0]['text'], "<i>–ò—â–µ–º ¬´<i>python</i>¬ª...</i>")
        self.assertTrue("https://www.google.com/search?q=python" in RESULTS[0][0]['reply_markup'])

    async def test_nojob(self):
        text = """–ú—ã –∑–¥–µ—Å—å –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞ —Ç–µ–±—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n\n–ó–¥–µ—Å—å –ø–æ–º–æ–≥–∞—é—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ <u>–¢–í–û–Å–ú</u> –∫–æ–¥–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —Å–∞–º –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –≥–¥–µ –∏ –ø–æ—á–µ–º—É –∑–∞—Å—Ç—Ä—è–ª... –≤—Å—ë –ø—Ä–æ—Å—Ç–æ. ü§∑üèºÔ∏è"""
        await self.bot.process_new_updates([get_update('/nojob', reply_to="–µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞")])
        self.assertEqual(RESULTS[0][0]['text'], text)

    async def test_nobot(self):
        text = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:\n–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç <i>–Ω–µ –¥–æ–ª–∂–µ–Ω</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, <code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>–æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</code>, <code>–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</code> –∏ <code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
        await self.bot.process_new_updates([get_update('/nobot', reply_to="–∫–∞–∫ –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å?")])
        self.assertEqual(RESULTS[0][0]['text'], text)

    async def test_nogui(self):
        text = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:\nGUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <i>–Ω–µ –¥–æ–ª–∂–Ω–æ</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, <code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>—Ü–∏–∫–ª—ã —Å–æ–±—ã—Ç–∏–π</code> –∏ <code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ GUI-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
        await self.bot.process_new_updates([get_update('/nogui', reply_to="–∫–∞–∫ gui –Ω–∞–ø–∏—Å–∞—Ç—å?")])
        self.assertEqual(RESULTS[0][0]['text'], text)

    async def test_spam_text(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                mocked.return_value = True
                await self.bot.process_new_updates([get_update('–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°, –ü–∏—Å–∞—Ç—å –≤ –õ–°')])
                self.assertEqual(RESULTS[0][1], "deleteMessage")
                self.assertEqual(RESULTS[1][1], "banChatMember")
                self.assertEqual(RESULTS[1][0], {'chat_id': 11, 'user_id': 10, 'until_date': None})

    async def test_wrong_url(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                mocked.return_value = True
                await self.bot.process_new_updates([get_update('—Ç—É—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ https://zvuk.com/artist/61375')])
                self.assertEqual(RESULTS[0][1], "deleteMessage")
                self.assertEqual(RESULTS[0][0], {'chat_id': 11, 'message_id': 1})

    async def test_update_stats(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                with patch("src.commands.update_stats") as update_stats:
                    mocked.return_value = True
                    update_stats.side_effect = lambda x: RESULTS.append(x)
                    await self.bot.process_new_updates([get_update('–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç')])
                    self.assertEqual(RESULTS[0].text, "–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç")

    async def test_admin_can_delete(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            mocked.return_value = True
            await self.bot.process_new_updates([get_update('/ddel', reply_to="shit text", user_id=ADMIN_ID)])
            self.assertEqual(RESULTS[0], ({'chat_id': 11, 'message_id': 1}, 'deleteMessage'))
            self.assertEqual(RESULTS[1], ({'chat_id': 11, 'message_id': 2}, 'deleteMessage'))

    async def test_user_cant(self):
        for command in ('/ddel', '/bban', '/unban_id', '/unban_id 1', '/add', '/remove'):
            with self.subTest(f"user cant use {command}"):
                # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
                with patch("src.filters.is_antispam_enabled") as mocked:
                    # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
                    with patch("src.commands.increment") as _mocked_shelve:
                        # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                        with patch("src.commands.update_stats") as update_stats:
                            # –ü–æ–¥–º–µ–Ω—è–µ–º speak, —á—Ç–æ–±—ã –°—Ç–µ–Ω –Ω–µ –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å
                            with patch("src.stan.speak") as speak:
                                speak.return_value = None
                                mocked.return_value = True
                                update_stats.side_effect = lambda x: None
                                await self.bot.process_new_updates([get_update(command, reply_to="shit text")])
                                self.assertEqual(RESULTS, [])

    async def test_admin_can_ban(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                with patch("src.commands.update_stats") as update_stats:
                    mocked.return_value = True
                    update_stats.side_effect = lambda x: None
                    await self.bot.process_new_updates([get_update('/bban', reply_to="shit text", user_id=ADMIN_ID)])
                    self.assertEqual(RESULTS[0], ({'chat_id': 11, 'message_id': 1}, 'deleteMessage'))
                    self.assertEqual(RESULTS[1], ({'chat_id': 11, 'message_id': 2}, 'deleteMessage'))
                    self.assertEqual(RESULTS[2][1], 'banChatMember')

    async def test_admin_can_unban(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª.
        with patch("src.filters.is_antispam_enabled") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                with patch("src.commands.update_stats") as update_stats:
                    mocked.return_value = True
                    update_stats.side_effect = lambda x: None
                    await self.bot.process_new_updates([get_update('/unban_id 1', reply_to="shit text",
                                                                   user_id=ADMIN_ID)])
                    self.assertEqual(RESULTS[0][1], 'unbanChatMember')

    async def test_white_id_can_add_quote(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
        with patch("src.commands.increment") as _mocked_shelve:
            # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
            with patch("src.stan.add_quote") as aq:
                aq.side_effect = lambda *a: None
                await self.bot.process_new_updates([get_update('/add', reply_to="good text", user_id=100)])
                self.assertEqual(RESULTS[0][1], 'sendMessage')
                self.assertEqual(RESULTS[0][0]['text'], '‚ûï\n  ‚îî good text')
                self.assertEqual(RESULTS[1][1], 'deleteMessage')

    async def test_white_id_cant_add_existing_quote(self):
        # –ù—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ç–∞—Ç—ã
        with patch("src.stan.is_quote_in_chat") as mocked:
            # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
            with patch("src.commands.increment") as _mocked_shelve:
                # –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                with patch("src.stan.add_quote") as add_qoute:
                    mocked.return_value = True
                    add_qoute.side_effect = lambda x, y: None
                    await self.bot.process_new_updates([get_update('/add', reply_to="good text", user_id=100)])
                    self.assertEqual(RESULTS[0][1], 'sendMessage')
                    self.assertEqual(RESULTS[0][0]['text'], '‚õîÔ∏è –ù–µ –¥–æ–±–∞–≤–∏–ª, –µ—Å—Ç—å —Ç–æ–∫–æ–µ\n  ‚îî good text')

    async def test_white_id_cant_remove_non_existing_quote(self):
        await self.bot.process_new_updates([get_update('/remove', reply_to="good text", user_id=100)])
        self.assertEqual(RESULTS[0][1], 'sendMessage')
        self.assertEqual(RESULTS[0][0]['text'], '‚õîÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ\n  ‚îî good text')

    async def test_white_id_can_remove_existing_quote(self):
        # –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏ —Ü–∏—Ç–∞—Ç—ã
        with patch("src.stan.is_quote_in_chat") as mocked:
            # –ü–æ–¥–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
            with patch("src.stan.delete_quote_in_chat") as delete_qoute:
                mocked.return_value = [["good text"]]
                delete_qoute.side_effect = lambda x, y: None
                mocked.return_value = True
                await self.bot.process_new_updates([get_update('/remove', reply_to="good text", user_id=100)])
                self.assertEqual(RESULTS[0][1], 'sendMessage')
                self.assertEqual(RESULTS[1][1], 'deleteMessage')
                self.assertEqual(RESULTS[0][0]['text'], '‚ûñ \n  ‚îî good text')

    async def test_new_user_in_chat(self):
        await self.bot.process_new_updates([member()])
        self.assertEqual(RESULTS[0][1], 'deleteMessage')
        self.assertEqual(RESULTS[1], ({'chat_id': 555}, 'getChat'))

    async def test_user_leave_chat(self):
        await self.bot.process_new_updates([member(leave=True)])
        self.assertEqual(RESULTS[0][1], 'deleteMessage')

    async def test_me(self):
        with patch("src.admin_commands.me") as mocked:
            mocked.side_effect = lambda m: m.text
            await self.bot.process_new_updates([get_update('/me')])
            self.assertEqual(RESULTS[0][1], 'sendMessage')
            self.assertEqual(RESULTS[0][0]['text'], '/me')

    async def test_admin_can_get_ip(self):
        with patch("src.admin_commands.my_ip") as mocked:
            mocked.return_value = '127.0.0.1'
            await self.bot.process_new_updates([get_update('/ip', user_id=ADMIN_ID)])
            self.assertEqual(RESULTS[0][1], 'sendMessage')
            self.assertEqual(RESULTS[0][0]['text'], '127.0.0.1')

    async def test_non_admin_cant_do(self):
        comands = ('ip', 'jobs', 'stats', 'reset_stats', 'enable_stan', 'disable_stan', 'set_antispam_report_reminder',
                   'set_rules', 'get_quotes', 'get_group_info')
        for command in comands:
            with self.subTest(f"user cant use {command}"):
                # –ù—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–µ–ª—å–∑—è —Ä–µ–∞–ª—å–Ω–æ –≤ —à–µ–ª–≤–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
                with patch("src.commands.increment") as _mocked_shelve:
                    # –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
                    with patch("src.commands.update_stats") as update_stats:
                        update_stats.side_effect = lambda x: None
                        await self.bot.process_new_updates([get_update(f'/{command}')])
                        self.assertEqual(RESULTS, [])

    async def test_remind_manually(self):
        params = (
            ("<b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: MM-DD-YYYY</b>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/remind 09-12-2024\n/remind 09-13-2022", ''),
            ("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É!\ntime data 'shit' does not match format '%m-%d-%Y'", ' shit'),
            ("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É!\ntime data '13-13-2020' does not match format '%m-%d-%Y'", ' 13-13-2020'),
            ("2023-10-10 00:00:00", ' 10-10-2023'),
        )
        for expected, date in params:
            with self.subTest(f"remind_manually {date}"):
                with patch("src.admin_commands.remind") as mocked:
                    mocked.side_effect = lambda x, y: RESULTS.append([{'text': str(y)}])
                    await self.bot.process_new_updates([get_update(f'/remind{date}')])
                    self.assertEqual(expected, RESULTS[0][0]['text'])
                    RESULTS.clear()

    async def test_admin_can_get_get_jobs(self):
        with patch("src.admin_commands.print_get_jobs") as mocked:
            mocked.return_value = 'jobs'
            await self.bot.process_new_updates([get_update('/jobs', user_id=ADMIN_ID)])
            self.assertEqual(RESULTS[0][1], 'sendMessage')
            self.assertEqual(RESULTS[0][0]['text'], 'jobs')
            self.assertEqual(RESULTS[0][0]['chat_id'], str(ADMIN_ID))

    async def test_send_stats(self):
        params = (
            ("11", ''),
            ("99", ' 99'),
            ([], ' 0'),
        )
        for expected, stats in params:
            with self.subTest(f"stats {stats}"):
                with patch("src.admin_commands.create_report_text") as mocked:
                    with patch("src.admin_commands.current_data") as mocked2:
                        mocked.side_effect = lambda x: str(x) if x != '0' else None
                        mocked2.return_value = 0, 0
                        await self.bot.process_new_updates([get_update(f'/stats{stats}', user_id=ADMIN_ID)])
                        if stats != ' 0':
                            self.assertEqual(expected, RESULTS[0][0]['text'])
                        else:
                            self.assertEqual(expected, RESULTS)
                        RESULTS.clear()

    async def test_enable_stan(self):
        params = (
            ('–ì—Ä—É–ø–ø–∞ "None" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î.\n/get_group_info - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', False),
            ('–û—Ç–∫–∞–∑. –ì—Ä—É–ø–ø–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞', True),
        )
        for expected, exists in params:
            with self.subTest(f"enable_stan chat_exists={exists}"):
                with patch("src.admin_commands.is_chat_exists") as mocked:
                    with patch("src.admin_commands.add_chat") as mocked2:
                        mocked.return_value = exists
                        mocked2.side_effect = lambda a, b: None
                        await self.bot.process_new_updates([get_update('/enable_stan', user_id=100)])
                        self.assertEqual(expected, RESULTS[0][0]['text'])
                        RESULTS.clear()

    async def test_disable_stan(self):
        params = (
            ('–û—Ç–∫–∞–∑. –≠—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –ë–î.', False),
            ('–ì—Ä—É–ø–ø–∞ DELETED –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —Ü–∏—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã!', True),
        )
        for expected, exists in params:
            with self.subTest(f"enable_stan chat_exists={exists}"):
                with patch("src.admin_commands.is_chat_exists") as mocked:
                    with patch("src.admin_commands.delete_chat") as mocked2:
                        mocked.return_value = exists
                        mocked2.side_effect = lambda a: 'DELETED'
                        await self.bot.process_new_updates([get_update('/disable_stan', user_id=ADMIN_ID)])
                        self.assertEqual(expected, RESULTS[0][0]['text'])
                        RESULTS.clear()

    async def test_set_antispam_report_reminder(self):
        params = (
            ((11, 1, 1, 1), 'set_rules 1 1 1'),
            ((11, 1, 1, 1), 'set_antispam_report_reminder 1 1 1'),
        )
        for expected, command in params:
            with self.subTest(f"set_antispam_report_reminder {command}"):
                with patch("src.admin_commands.update_chat") as mocked:
                    mocked.side_effect = lambda *a: RESULTS.append(a)
                    await self.bot.process_new_updates([get_update(f'/{command}', user_id=100)])
                    self.assertEqual(expected, RESULTS[0])
                    self.assertEqual("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: /get_group_info", RESULTS[1][0]['text'])
                    RESULTS.clear()

    async def test_get_quotes(self):
        params = (
            ("–¶–∏—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /get_group_info", []),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç: 1\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n\n¬∑ one", ['one']),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç: 2\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n\n¬∑ one\n¬∑ two", ['one', 'two']),
        )
        for expected, quotes in params:
            with self.subTest(f"get_quotes {quotes}"):
                with patch("src.admin_commands.all_chat_quotes") as mocked:
                    mocked.side_effect = lambda *a: quotes
                    await self.bot.process_new_updates([get_update('/get_quotes', user_id=100)])
                    self.assertEqual(expected, RESULTS[0][0]['text'])
                    RESULTS.clear()

    async def test_get_group_info(self):
        exp = f"–ì—Ä—É–ø–ø–∞: Title\nID –≥—Ä—É–ø–ø—ã: 11\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç:  0\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ: /get_quotes\n\n" \
              f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n  –ê–Ω—Ç–∏—Å–ø–∞–º: 1\n  –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: 1\n  –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: 1"
        params = (
            ("–ì—Ä—É–ø–ø–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç—å: /enable_stan", None),
            (exp, MagicMock(title="Title", chat_id=11, quotes=[], antispam=1, report=1, reminder=1)),
        )
        for expected, chat in params:
            with self.subTest(f"get_group_info {chat}"):
                with patch("src.admin_commands.chat_by_id") as mocked:
                    mocked.side_effect = lambda *a: chat
                    await self.bot.process_new_updates([get_update('/get_group_info', user_id=100)])
                    self.assertEqual(expected, RESULTS[0][0]['text'])
                    RESULTS.clear()

    async def test_invalid_name_user(self):
        await self.bot.process_new_updates([get_update('–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', first_name=None)])
        self.assertEqual(RESULTS[0][0]['chat_id'], '11')
        self.assertEqual(RESULTS[0][0]['text'], '<b>–ü—Ä–∞–≤–∏–ª–æ 6</b>\n<i>–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º</i>')
        self.assertEqual(RESULTS[0][1], 'sendMessage')
        self.assertEqual(RESULTS[1][1], 'deleteMessage')


if __name__ == '__main__':
    main()
