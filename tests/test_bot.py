import logging
from unittest import IsolatedAsyncioTestCase, main
import os

from telebot import asyncio_helper, types, logger

# –ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞, –∏–Ω–∞—á–µ —É–ø–∞–¥–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω—É
os.environ["LUTZPYBOT"] = "00000:AAAAAAAAAAAA"
from src import helpers

# –Ω—É–∂–Ω–æ –Ω–µ –¥–∞—Ç—å –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç–∞—Ö, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—É—Ç -–∑–∞ –ü—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞
helpers.is_url_reachable = lambda a: True
from src.commands import bot

# –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞, –≤ —Ç–µ—Å—Ç–∞—Ö –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
logger.setLevel(logging.ERROR)


def get_update(text, reply_to=None):
    params = {'text': text}
    chat = types.Chat(id=11, type='private')
    user = types.User(id=10, is_bot=False, first_name='Some User')
    if reply_to:
        params["reply_to_message"] = types.Message(message_id=1, from_user=user, date=None, chat=chat,
                                                   content_type='text', options={'text': reply_to}, json_string="")
    mess = types.Message(message_id=1, from_user=user, date=None, chat=chat, content_type='text', options=params,
                         json_string="")
    edited_message = None
    channel_post = None
    edited_channel_post = None
    inline_query = None
    chosen_inline_result = None
    callback_query = None
    shipping_query = None
    pre_checkout_query = None
    poll = None
    poll_answer = None
    my_chat_member = None
    chat_member = None
    chat_join_request = None
    return types.Update(1001234038283, mess, edited_message, channel_post, edited_channel_post, inline_query,
                        chosen_inline_result, callback_query, shipping_query, pre_checkout_query, poll, poll_answer,
                        my_chat_member, chat_member, chat_join_request)

# —Å—é–¥–∞ –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –æ—á–∏—â–∞–µ—Ç—Å—è
RESULTS = []


async def custom_sender(token, url, method='get', params=None, files=None, **kwargs):
    RESULTS.append(params)
    result = {"message_id": 1, "date": 1, "chat": {"id": 1, "type": "private"}}
    return result

# –ß—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–µ–ª–µ–≥–µ
asyncio_helper._process_request = custom_sender


class TestBot(IsolatedAsyncioTestCase):
    def setUp(self) -> None:
        self.bot = bot
        RESULTS.clear()

    async def test_start(self):
        await self.bot.process_new_updates([get_update('/start')])
        self.assertEqual(RESULTS[0]['text'], "–ù–∞—á–Ω–∏ —Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è")

    async def test_non_grata(self):
        await self.bot.process_new_updates([get_update('–∫–∞–∫ –≤–∞–º –¥—É–¥–∞—Ä—å?')])
        self.assertEqual(RESULTS[0]['text'], "—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ –ª—é–±—è—Ç")

    async def test_non_grata2(self):
        await self.bot.process_new_updates([get_update('—Å–º–æ—Ç—Ä—é —Ö–∞—É–¥–∏')])
        self.assertEqual(RESULTS[0]['text'], "—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ –ª—é–±—è—Ç")

    async def test_rules(self):
        await self.bot.process_new_updates([get_update('/rules')])
        self.assertEqual(RESULTS[0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/pythonchatru-07-07" in RESULTS[0]['reply_markup'])

    async def test_faq(self):
        await self.bot.process_new_updates([get_update('/faq')])
        self.assertEqual(RESULTS[0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/faq-10-07-4" in RESULTS[0]['reply_markup'])

    async def test_lib(self):
        await self.bot.process_new_updates([get_update('/lib')])
        self.assertEqual(RESULTS[0]['text'], "–ß–∏—Ç–∞–π...")
        self.assertTrue("https://telegra.ph/what-to-read-10-06" in RESULTS[0]['reply_markup'])

    async def test_tr(self):
        await self.bot.process_new_updates([get_update('/tr', reply_to="ghbdtn")])
        self.assertEqual(RESULTS[0]['text'], "–ø—Ä–∏–≤–µ—Ç")

    async def test_tr2(self):
        await self.bot.process_new_updates([get_update('/tr', reply_to="—Ä—É–¥–¥—â")])
        self.assertEqual(RESULTS[0]['text'], "hello")

    async def test_tsya(self):
        await self.bot.process_new_updates([get_update('/tsya')])
        self.assertEqual(RESULTS[0]['text'], "<i>-—Ç—Å—è</i> –∏ <i>-—Ç—å—Å—è</i> –≤ –≥–ª–∞–≥–æ–ª–∞—Ö")
        self.assertTrue("https://tsya.ru/" in RESULTS[0]['reply_markup'])

    async def test_nometa(self):
        text = """–ù–µ –∑–∞–¥–∞–≤–∞–π –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä–æ–¥–µ:\n<i>  ¬´–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?¬ª\n  ¬´–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è .. ?¬ª\n  ¬´–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ .. !¬ª</i>\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ —Å—Ä–∞–∑—É! –ò —á–µ–º –ª—É—á—à–µ –æ–±—ä—è—Å–Ω–∏—à—å –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –ø–æ–ª—É—á–∏—à—å –ø–æ–º–æ—â—å."""
        await self.bot.process_new_updates([get_update('/nometa', reply_to="–∫—Ç–æ —Ç—É—Ç –ø–∏—Ç–æ–Ω–∏—Å—Ç?")])
        self.assertEqual(RESULTS[0]['text'], text)

    async def test_neprivet(self):
        await self.bot.process_new_updates([get_update('/neprivet', reply_to="–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º")])
        self.assertEqual(RESULTS[0]['text'], "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ ¬´–ü—Ä–∏–≤–µ—Ç¬ª –≤ —á–∞—Ç–µ.")
        self.assertTrue("https://neprivet.com/" in RESULTS[0]['reply_markup'])

    async def test_nojob(self):
        text = """–ú—ã –∑–¥–µ—Å—å –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞ —Ç–µ–±—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n\n–ó–¥–µ—Å—å –ø–æ–º–æ–≥–∞—é—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ <u>–¢–í–û–Å–ú</u> –∫–æ–¥–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —Å–∞–º –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –≥–¥–µ –∏ –ø–æ—á–µ–º—É –∑–∞—Å—Ç—Ä—è–ª... –≤—Å—ë –ø—Ä–æ—Å—Ç–æ. ü§∑üèºÔ∏è"""
        await self.bot.process_new_updates([get_update('/nojob', reply_to="–µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞")])
        self.assertEqual(RESULTS[0]['text'], text)

    async def test_nobot(self):
        text = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:\n–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç <i>–Ω–µ –¥–æ–ª–∂–µ–Ω</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, <code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>–æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</code>, <code>–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</code> –∏ <code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
        await self.bot.process_new_updates([get_update('/nobot', reply_to="–∫–∞–∫ –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å?")])
        self.assertEqual(RESULTS[0]['text'], text)

    async def test_nogui(self):
        text = """<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>:\nGUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <i>–Ω–µ –¥–æ–ª–∂–Ω–æ</i> –±—ã—Ç—å —Ç–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏ <code>–æ—Å–Ω–æ–≤—ã Python</code>, <code>—Ä–∞–±–æ—Ç—É —Å –º–æ–¥—É–ª—è–º–∏</code>, <code>—Ü–∏–∫–ª—ã —Å–æ–±—ã—Ç–∏–π</code> –∏ <code>–æ—Ç–ª–∞–¥–∫—É</code> –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ GUI-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
        await self.bot.process_new_updates([get_update('/nogui', reply_to="–∫–∞–∫ gui –Ω–∞–ø–∏—Å–∞—Ç—å?")])
        self.assertEqual(RESULTS[0]['text'], text)


if __name__ == '__main__':
    main()
